generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
	id String @id @default(uuid())
	userId String
	name String
	url String
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	user User @relation("UserFiles", fields: [userId], references: [id])

	userAvatars User[] @relation("AvatarFile")
	coursePreviews Course[]
	alumnusAvatars Alumnus[] @relation("AlumnusAvatar")
	alumnusIncomes Alumnus[] @relation("AlumnusIncome")
	alumnusCertificates Alumnus[] @relation("AlumnusCertificate")
	alumnusReviews Alumnus[] @relation("AlumnusReview")
	homeworkAnswers HomeworkAnswer[]
	lessons Lesson[]
}

enum UserRole {
  USER
  EXPERT
  ADMIN
}

model User {
	id String @id @default(uuid())
	email String @unique
	firstName String
	lastName String
	avatarFileId String?
	password String?
	role UserRole @default(USER)
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	avatarFile File? @relation("AvatarFile", fields: [avatarFileId], references: [id])

	expert Expert?
	homeworkAnswers HomeworkAnswer[]
	submittedTests SubmittedTest[]
	submittedTestAnswers SubmittedTestAnswer[]
	courseReviews CourseReview[]
	lessonReviews LessonReview[]
	studentProgresses StudentProgress[]
	providers UserAuthProvider[]
	promocodes Promocode[]
	promocodeUsage PromocodeUsage?
	courseEnrollments CourseEnrollment[]
	expertReviews ExpertReview[]
	files File[] @relation("UserFiles")
}

model Promocode {
	id String @id @default(uuid())
	code String @unique
	userId String
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	user User @relation(fields: [userId], references: [id])

	usages PromocodeUsage[]
}

model PromocodeUsage {
	id String @id @default(uuid())
	userId String @unique
	promocodeId String
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	promocode Promocode @relation(fields: [promocodeId], references: [id])
	user User @relation(fields: [userId], references: [id])
}

enum AuthProviderName {
  GOOGLE
}

model UserAuthProvider {
  	id String @id @default(uuid())
  	name AuthProviderName
  	uid String
	userId String @unique
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

  	user User @relation(fields: [userId], references: [id])
}

model Review {
	id String @id @default(uuid())
	rating Int
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	homeworkAnswerFeedbacks HomeworkAnswerFeedback[]
	courseReviews CourseReview[]
	lessonReviews LessonReview[]
	expertReviews ExpertReview[]
}

model Expert {
	id String @id @default(uuid())
	userId String @unique
	about String @default("")
	plainPassword String
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	user User @relation(fields: [userId], references: [id])

	courses Course[]
	reviews ExpertReview[]
	homeworkAnswerFeedbacks HomeworkAnswerFeedback[]
}

enum CourseType {
	FL_TEENS
	EDUCATION
	LANGUAGE
}

enum CourseLanguage {
	KZ
	RU
	EN
}

model Course {
	id String @id @default(uuid())
	authorId String
	name String
	hook String
	description String
	language CourseLanguage
	duration Int
	audience String[]
	type CourseType
	previewFileId String
	price Int?
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	author Expert @relation(fields: [authorId], references: [id], onDelete: Cascade)
	previewFile File @relation(fields: [previewFileId], references: [id])

	lessons Lesson[]
	reviews CourseReview[]
	studentProgresses StudentProgress[]
	courseEnrollments CourseEnrollment[]
	alumni Alumnus[]
}

model Lesson {
	id String @id @default(uuid())
	courseId String
	name String
	topics String[]
	videoFileId String
	order Int
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
	videoFile File @relation(fields: [videoFileId], references: [id])

	homework LessonHomework?
	reviews LessonReview[]
}

enum LessonHomeworkType {
	TEST
	TEXT
}

model LessonHomework {
	id String @id @default(uuid())
	lessonId String @unique
	type LessonHomeworkType
	testId String? @unique
	text String?
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	test Test? @relation(fields: [testId], references: [id])
	lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

	answers HomeworkAnswer[]
}

enum HomeworkAnswerStatus {
	PENDING
	APPROVED
	FAILED
}

model HomeworkAnswer {
	id String @id @default(uuid())
	homeworkId String
	userId String
	submittedTestId String?
	fileId String?
	text String?
	status HomeworkAnswerStatus
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	homework LessonHomework @relation(fields: [homeworkId], references: [id], onDelete: Cascade)
	user User @relation(fields: [userId], references: [id])
	file File? @relation(fields: [fileId], references: [id])
	submittedTest SubmittedTest? @relation(fields: [submittedTestId], references: [id])

	feedback HomeworkAnswerFeedback?
}

model HomeworkAnswerFeedback {
	id String @id @default(uuid())
	expertId String
	answerId String @unique
	reviewId String
	comment String?
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	expert Expert @relation(fields: [expertId], references: [id], onDelete: Cascade)
	answer HomeworkAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)
	review Review @relation(fields: [reviewId], references: [id])
}

model Test {
	id String @id @default(uuid())
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	homework LessonHomework?
	questions TestQuestion[]
	answers TestAnswer[]
	submittedTests SubmittedTest[]
	submittedAnswers SubmittedTestAnswer[]
}

model TestQuestion {
	id String @id @default(uuid())
	testId String
	text String
	order Int
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	test Test @relation(fields: [testId], references: [id])

	answers TestAnswer[]
	submittedAnswers SubmittedTestAnswer[]
}

model TestAnswer {
	id String @id @default(uuid())
	testId String
	questionId String
	text String
	isCorrect Boolean
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	test Test @relation(fields: [testId], references: [id])
	question TestQuestion @relation(fields: [questionId], references: [id])

	submittedAnswers SubmittedTestAnswer[]
}

model SubmittedTestAnswer {
	id String @id @default(uuid())
	testId String
	questionId String
	answerId String
	userId String
	submittedTestId String
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	user User @relation(fields: [userId], references: [id])
	test Test @relation(fields: [testId], references: [id])
	question TestQuestion @relation(fields: [questionId], references: [id])
	answer TestAnswer @relation(fields: [answerId], references: [id])
	submittedTest SubmittedTest @relation(fields: [submittedTestId], references: [id])
}

model SubmittedTest {
	id String @id @default(uuid())
	testId String
	userId String
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	test Test @relation(fields: [testId], references: [id])
	user User @relation(fields: [userId], references: [id])

	homeworkAnswers HomeworkAnswer[]
	submittedAnswers SubmittedTestAnswer[]
}

model CourseReview {
	id String @id @default(uuid())
	userId String
	courseId String
	reviewId String
	feedback String
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	user User @relation(fields: [userId], references: [id])
	course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
	review Review @relation(fields: [reviewId], references: [id])
}

model LessonReview {
	id String @id @default(uuid())
	userId String
	lessonId String
	reviewId String
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	user User @relation(fields: [userId], references: [id])
	lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
	review Review @relation(fields: [reviewId], references: [id])
}

enum RequiredExperience {
	NONE
	ONE_TO_THREE_YEARS
	THREE_TO_FIVE_YEARS
	FIVE_AND_MORE_YEARS
}

enum EmploymentType {
	PART_TIME
	FULL_TIME
	INTERNSHIP
}

enum ModalityType {
	ON_SITE
	REMOTE
	HYBRID
}

model Vacancy {
	id String @id @default(uuid())
	company String
	position String
	requiredExperience RequiredExperience
	employmentType EmploymentType[]
	modalityType ModalityType[]
	salary Int
	link String
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt
}

model Alumnus {
	id String @id @default(uuid())
	firstName String
	lastName String
	about String
	avatarFileId String
	courseId String
	workplace String
	incomeFileId String
	certificateFileId String
	reviewFileId String
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	avatarFile File @relation("AlumnusAvatar", fields: [avatarFileId], references: [id])
	course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
	incomeFile File @relation("AlumnusIncome", fields: [incomeFileId], references: [id])
	certificateFile File @relation("AlumnusCertificate", fields: [certificateFileId], references: [id])
	reviewFile File @relation("AlumnusReview", fields: [reviewFileId], references: [id])
}

model StudentProgress {
	id String @id @default(uuid())
	userId String
	courseId String
	progress Int @default(0)
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	user User @relation(fields: [userId], references: [id])
	course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseEnrollment {
	id String @id @default(uuid())
	userId String
	courseId String?
	pack CourseType?

	user User @relation(fields: [userId], references: [id])
	course Course? @relation(fields: [courseId], references: [id])
}

model ExpertReview {
	id String @id @default(uuid())
	userId String
	expertId String
	reviewId String
	comment String?
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt

	user User @relation(fields: [userId], references: [id])
	expert Expert @relation(fields: [expertId], references: [id])
	review Review @relation(fields: [reviewId], references: [id])
}

model ConsultationRequest {
	id String @id @default(uuid())
	name String
	phone String
	createdAt DateTime @default(now())
  	updatedAt DateTime @updatedAt
}